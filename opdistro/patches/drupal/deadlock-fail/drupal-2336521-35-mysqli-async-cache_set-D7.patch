diff --git a/includes/cache.inc b/includes/cache.inc
index 207bf66..cf80f1a 100644
--- a/includes/cache.inc
+++ b/includes/cache.inc
@@ -345,7 +345,37 @@ class DrupalDatabaseCache implements DrupalCacheInterface {
       // is used here only due to the performance overhead we would incur
       // otherwise. When serving an uncached page, the overhead of using
       // db_select() is a much smaller proportion of the request.
-      $result = db_query('SELECT cid, data, created, expire, serialized FROM {' . db_escape_table($this->bin) . '} WHERE cid IN (:cids)', array(':cids' => $cids));
+      if (function_exists('drupal_mysqli_get_object')) {
+        $mysqli = drupal_mysqli_get_object(FALSE, $this->bin, $cids);
+      }
+      if (!empty($mysqli)) {
+        // Build query.
+        $escaped_table = db_escape_table($this->bin);
+        $query = "SELECT cid, data, created, expire, serialized FROM {{$escaped_table}}";
+        $query = Database::getConnection()->prefixTables($query);
+        foreach ($cids as $cid) {
+          $escaped_cids[] = $mysqli->real_escape_string($cid);
+        }
+        $escaped_cids = "'" . implode("', '", $escaped_cids) . "'";
+        $query .= " WHERE cid IN ({$escaped_cids})";
+        // Run query.
+        $results = $mysqli->query($query);
+
+        // Convert to an object to mirror db_query.
+        $result = array();
+        if (!empty($results) && is_object($results) && method_exists($results, 'fetch_object')) {
+          while ($obj = $results->fetch_object()) {
+            $result[] = $obj;
+          }
+        }
+        $result = (object) $result;
+        if (!empty($results)) {
+          $results->close();
+        }
+      }
+      else {
+        $result = db_query('SELECT cid, data, created, expire, serialized FROM {' . db_escape_table($this->bin) . '} WHERE cid IN (:cids)', array(':cids' => $cids));
+      }
       $cache = array();
       foreach ($result as $item) {
         $item = $this->prepareItem($item);
@@ -460,10 +490,27 @@ class DrupalDatabaseCache implements DrupalCacheInterface {
     }
 
     try {
-      db_merge($this->bin)
-        ->key(array('cid' => $cid))
-        ->fields($fields)
-        ->execute();
+      if (function_exists('drupal_mysqli_get_object')) {
+        $mysqli = drupal_mysqli_get_object(TRUE, $this->bin, array($cid));
+      }
+      if (empty($mysqli)) {
+        db_merge($this->bin)
+          ->key(array('cid' => $cid))
+          ->fields($fields)
+          ->execute();
+      }
+      else {
+        // Build query.
+        $escaped_table = db_escape_table($this->bin);
+        $escaped_cid = $mysqli->real_escape_string($cid);
+        $escaped_data = $mysqli->real_escape_string($fields['data']);
+        $query = "INSERT INTO {{$escaped_table}}";
+        $query = Database::getConnection()->prefixTables($query);
+        $query .= " (cid, serialized, created, expire, data) VALUES ('$escaped_cid', '{$fields['serialized']}', '{$fields['created']}', '{$fields['expire']}', '$escaped_data')";
+        $query .= " ON DUPLICATE KEY UPDATE serialized = '{$fields['serialized']}', created = '{$fields['created']}', expire = '{$fields['expire']}', data = '$escaped_data'";
+        // Run query.
+        $results = $mysqli->query($query, MYSQLI_ASYNC);
+      }
     }
     catch (Exception $e) {
       // The database may not be available, so we'll ignore cache_set requests.
diff --git a/includes/database/mysql/database.inc b/includes/database/mysql/database.inc
index 4907a39..cf75824 100644
--- a/includes/database/mysql/database.inc
+++ b/includes/database/mysql/database.inc
@@ -6,6 +6,276 @@
  */
 
 /**
+ * Return a mysqli object that is ready to be used.
+ *
+ * @param bool $create_new_connection
+ *   If FALSE, it will not create a new connection (cache_get).
+ * @param string $table
+ *   Database table name.
+ * @param array $cids
+ *   An array of cache IDs.
+ *
+ * @return mysqli
+ *   returns a mysqli object on success or FALSE on failure.
+ */
+function drupal_mysqli_get_object($create_new_connection = TRUE, $table = '', array $cids = array()) {
+  // Bail out if not mysql that is async capable.
+  $mysqli = FALSE;
+  if (   !function_exists('mysqli_init')
+      || !defined('MYSQLI_ASYNC')
+      || Database::getConnection()->databaseType() !== 'mysql'
+    ) {
+    return $mysqli;
+  }
+
+  // Use the advanced drupal_static() pattern for $db_info.
+  static $db_info;
+  if (!isset($db_info)) {
+    $db_info = &drupal_static(__FUNCTION__);
+
+    // 'var' stores variables about the mysql database.
+    if (!isset($db_info['var'])) {
+      $db_info['var'] = db_query("SELECT @@global.max_connections AS max_connections, @@global.wait_timeout AS wait_timeout")->fetchAssoc();
+      // Limit total DB connections to 90 or 80% of the max; whatever is smaller.
+      $db_info['var']['max_connections'] = floor(min(90, $db_info['var']['max_connections'] * 0.8));
+      // Set wait timeout to 90 seconds or the current value; whatever is smaller.
+      $db_info['var']['wait_timeout'] = min(90, $db_info['var']['wait_timeout']);
+      $db_info['var']['connect_timeout'] = 2;
+      $db_info['var']['innodb_lock_wait_timeout'] = 2;
+      // max_connections_per_process is only used here, not a mysql variable.
+      $db_info['var']['max_connections_per_process'] = 6;
+    }
+
+    // 'connection' stores the info needed to make a new connection to mysql.
+    if (!isset($db_info['connection'])) {
+      // Use default connection info.
+      $connection_info = Database::getConnectionInfo();
+      $db_info['connection'] = reset($connection_info);
+      if (empty($db_info['connection']['port'])) {
+        $db_info['connection']['port'] = NULL;
+      }
+      else {
+        $db_info['connection']['port'] = (int)$db_info['connection']['port'];
+      }
+      if (empty($db_info['connection']['unix_socket'])) {
+        $db_info['connection']['unix_socket'] = NULL;
+      }
+      if (empty($db_info['connection']['password'])) {
+        $db_info['connection']['password'] = NULL;
+      }
+    }
+
+    // 'pool' stores a collection of open mysql connections.
+    if (!isset($db_info['pool'])) {
+      $db_info['pool'] = array();
+    }
+  }
+
+  // Make sure a table/cid pair is used by the same connection in order to avoid
+  // record level deadlocks.
+  if (empty($create_new_connection) && !empty($db_info['pool']) && !empty($table) && !empty($cids)) {
+    foreach ($db_info['pool'] as $values) {
+      // Match the table.
+      if ($table == $values[1]) {
+        // Match the cache id.
+        $intersect = array_intersect($cids, $values[2]);
+        if (!empty($intersect)) {
+          // Wait for the query to finish.
+          @$values[0]->reap_async_query();
+          $mysqli = $values[0];
+        }
+      }
+    }
+  }
+
+  // Try to reuse an old connection.
+  if (empty($mysqli) && !empty($db_info['pool'])) {
+    // Poll connections; see if they are ready to be used again.
+    $reads = $errors = $rejects = _drupal_mysqli_get_poll_parameters($db_info);
+    $ready = @mysqli_poll($reads, $errors, $rejects, 0, 1);
+    $mysqli = _drupal_mysqli_poll_get_ready_mysqli_connection($db_info, $reads, $errors, $rejects);
+
+    // All current connections are in use.
+    if (empty($mysqli) && count($db_info['pool']) < $db_info['var']['max_connections_per_process']) {
+      // Create a new DB connection.
+      $mysqli = drupal_mysqli_new_connection($db_info);
+    }
+    if (empty($mysqli)) {
+      // Wait for a db connection to be ready.
+      $ready = FALSE;
+      $mysqli_pool = _drupal_mysqli_get_poll_parameters($db_info);
+      while (!$ready) {
+        // Poll every 5ms, waiting for a query to finish.
+        $reads = $errors = $rejects = $mysqli_pool;
+        $ready = @mysqli_poll($reads, $errors, $rejects, 0, 5000);
+        if (!$ready && !empty($rejects)) {
+          $ready = TRUE;
+        }
+      }
+      $mysqli = _drupal_mysqli_poll_get_ready_mysqli_connection($db_info, $reads, $errors, $rejects);
+    }
+  }
+
+  if (empty($mysqli) && empty($db_info['pool']) && $create_new_connection) {
+    $mysqli = drupal_mysqli_new_connection($db_info);
+  }
+  if (!empty($mysqli)) {
+    drupal_mysqli_ping($mysqli, $db_info, $table, $cids);
+  }
+  return $mysqli;
+}
+
+/**
+ * Get all mysqli connections for use in mysqli_poll().
+ *
+ * @param array $db_info
+ *   static var from 'drupal_mysqli_get_object'.
+ *
+ * @return array $mysqli_pool
+ *   An array of mysqli connections.
+ */
+function _drupal_mysqli_get_poll_parameters(array $db_info) {
+  $mysqli_pool = array();
+  foreach ($db_info['pool'] as $values) {
+    $mysqli_pool[] = $values[0];
+  }
+  return $mysqli_pool;
+}
+
+/**
+ * Get the first available mysqli connection if available.
+ *
+ * @param array $db_info
+ *   static var from 'drupal_mysqli_get_object'.
+ * @param array $reads
+ *   Async connections to check for results.
+ * @param array $errors
+ *   Connections on which an error occured; query failure or lost connection.
+ * @param array $rejects
+ *   Rejected connections because no async query has been run on it.
+ *
+ * @return mysqli
+ *   returns a mysqli object on success or FALSE on failure.
+ */
+function _drupal_mysqli_poll_get_ready_mysqli_connection(array $db_info, array $reads, array $errors, array $rejects) {
+  $mysqli = FALSE;
+  if (!empty($rejects)) {
+    // A non async connection is ready; use the first one.
+    $mysqli = reset($rejects);
+  }
+  if (empty($mysqli) && !empty($reads)) {
+    // An async connection is ready; use the first one.
+    $mysqli = reset($reads);
+    @$mysqli->reap_async_query();
+  }
+  if (!empty($errors)) {
+    // On error remove that connection.
+    foreach ($errors as $error) {
+      if (isset($db_info['pool'][$error->thread_id])) {
+        unset($db_info['pool'][$error->thread_id]);
+      }
+    }
+  }
+  return $mysqli;
+}
+
+/**
+ * Create a new MySQLi connection.
+ *
+ * @param array $db_info
+ *   static var from 'drupal_mysqli_get_object'.
+ *
+ * @return mysqli
+ *   returns a mysqli object on success or FALSE on failure.
+ */
+function drupal_mysqli_new_connection(array $db_info) {
+  // Get Threads_connected, max_connections, & wait_timeout from the DB.
+  $db_info['var'] += db_query("SHOW STATUS WHERE Variable_name LIKE 'Threads_connected'")->fetchAllKeyed();
+  $db_info['var'] = array_change_key_case($db_info['var'], CASE_LOWER);
+  if ($db_info['var']['threads_connected'] >= $db_info['var']['max_connections']) {
+    // Bail out if the DB has a lot of connections currently.
+    return FALSE;
+  }
+
+  // Create new MySQL connection.
+  $mysqli = new mysqli();
+  $mysqli->options(MYSQLI_OPT_CONNECT_TIMEOUT, $db_info['var']['connect_timeout']);
+  @$mysqli->real_connect($db_info['connection']['host'], $db_info['connection']['username'], $db_info['connection']['password'], $db_info['connection']['database'], $db_info['connection']['port'], $db_info['connection']['unix_socket']);
+
+  if (empty($mysqli) || !empty($mysqli->connect_errno) || empty($mysqli->host_info)) {
+    // Bail out if the DB didn't connect.
+    return FALSE;
+  }
+  if (!empty($mysqli)) {
+    // Get connection ready for usage.
+    $mysqli->set_charset('utf8');
+    if (!isset($db_info['connection']['init_commands'])) {
+      $db_info['connection']['init_commands'] = array();
+    }
+    $db_info['connection']['init_commands'] += array(
+      'sql_mode' => "SET sql_mode = 'ANSI,STRICT_TRANS_TABLES,STRICT_ALL_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER'",
+      'isolation' => "SET SESSION tx_isolation='READ-UNCOMMITTED'",
+      'wait_timeout' => 'SET SESSION wait_timeout = ' . $db_info['var']['wait_timeout'],
+      'innodb_lock' => 'SET SESSION innodb_lock_wait_timeout = ' . $db_info['var']['innodb_lock_wait_timeout'],
+    );
+    foreach ($db_info['connection']['init_commands'] as $query) {
+      $good = $mysqli->query($query);
+      if (empty($good)) {
+        // Bail out if the these queries failed.
+        return FALSE;
+      }
+    }
+  }
+  // Make sure all async queries finish before php is killed.
+  // Using a nested register_shutdown_function makes sure this is executed last.
+  register_shutdown_function('register_shutdown_function', 'drupal_mysqli_close', $mysqli);
+  return $mysqli;
+}
+
+/**
+ * Reconnect to the MySQL database if the connection has been lost.
+ *
+ * Will also record the table and cache ID used.
+ *
+ * @param mysqli $mysqli
+ *   mysqlnd connection object. Passed by reference.
+ * @param array $db_info
+ *   static var from 'drupal_mysqli_get_object'. Passed by reference.
+ * @param string $table
+ *   table name.
+ * @param array $cids
+ *   An array of cache IDs.
+ */
+function drupal_mysqli_ping(mysqli &$mysqli, array &$db_info, $table, array $cids) {
+  $timeout_check = max(1, $db_info['var']['wait_timeout'] - 5);
+  $timer = ceil(timer_read('page') / 1000);
+  if ($timer > $timeout_check) {
+    if (empty($mysqli) || !@$mysqli->ping()) {
+      unset($db_info['pool'][$mysqli->thread_id]);
+      $mysqli = drupal_mysqli_new_connection($db_info);
+      if (empty($mysqli) || !@$mysqli->ping()) {
+        $mysqli = FALSE;
+      }
+    }
+  }
+  if (!empty($mysqli)) {
+    $db_info['pool'][$mysqli->thread_id] = array($mysqli, $table, $cids);
+  }
+}
+
+/**
+ * Wait for the result from an async query and then unset the connection.
+ *
+ * @param mysqli $mysqli
+ *   mysqlnd connection object. Passed by reference.
+ */
+function drupal_mysqli_close(mysqli &$mysqli) {
+  @$mysqli->reap_async_query();
+  unset($mysqli);
+  $mysqli = FALSE;
+}
+
+/**
  * @addtogroup database
  * @{
  */
